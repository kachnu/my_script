diff -ru usr/src/nv/Makefile.kbuild usr/src/nv.2627763/Makefile.kbuild
--- usr/src/nv/Makefile.kbuild	2008-06-10 17:17:33.000000000 -0700
+++ usr/src/nv.2627763/Makefile.kbuild	2008-08-08 08:52:54.170807277 -0700
@@ -63,6 +63,8 @@
 # set this conditional of a kernel-level instance.
 #
 
+TOPDIR ?= $(srctree)
+
 ifdef TOPDIR
 obj-m := $(MODULE_NAME).o
 endif
@@ -186,13 +188,16 @@
 	acpi_device_ops \
 	acpi_device_id \
 	acquire_console_sem \
-	kmem_cache_create
+	kmem_cache_create \
+	on_each_cpu \
+	smp_call_function
 else
  COMPILE_TESTS = \
 	remap_page_range \
 	vmap \
 	change_page_attr \
-	i2c_adapter
+	i2c_adapter \
+	smp_call_function
 endif
 
 #
diff -ru usr/src/nv/Makefile.nvidia usr/src/nv.2627763/Makefile.nvidia
--- usr/src/nv/Makefile.nvidia	2008-06-10 17:17:33.000000000 -0700
+++ usr/src/nv.2627763/Makefile.nvidia	2008-08-08 08:52:54.174807504 -0700
@@ -62,7 +62,8 @@
 	remap_page_range \
 	vmap \
 	change_page_attr \
-	i2c_adapter
+	i2c_adapter \
+	smp_call_function
 
 DEFINES+=$(EXTRA_DEFINES)
 
Only in usr/src/nv.2627763: Module.symvers
diff -ru usr/src/nv/conftest.sh usr/src/nv.2627763/conftest.sh
--- usr/src/nv/conftest.sh	2008-06-10 17:17:33.000000000 -0700
+++ usr/src/nv.2627763/conftest.sh	2008-08-08 08:52:54.174807504 -0700
@@ -159,7 +159,7 @@
             #
             # Determine if the set_pages_uc() function is present.
             #
-            echo "#include <linux/autoconf.h>
+            echo "$CONFTEST_PREAMBLE
             #include <asm/cacheflush.h>
             void conftest_set_pages_uc(void) {
                 set_pages_uc();
@@ -774,6 +774,120 @@
             fi
         ;;
 
+        smp_call_function)
+            #
+            # Determine if the smp_call_function() function is
+            # present and how many arguments it takes.
+            #
+            echo "$CONFTEST_PREAMBLE
+            #include <linux/smp.h>
+            void conftest_smp_call_function(void) {
+            #ifdef CONFIG_SMP
+                smp_call_function();
+            #endif
+            }" > conftest$$.c
+
+            $CC $CFLAGS -c conftest$$.c > /dev/null 2>&1
+            rm -f conftest$$.c
+
+            if [ -f conftest$$.o ]; then
+                rm -f conftest$$.o
+                echo "#undef NV_SMP_CALL_FUNCTION_PRESENT" >> conftest.h
+                return
+            fi
+
+            echo "$CONFTEST_PREAMBLE
+            #include <linux/smp.h>
+            void conftest_smp_call_function(void) {
+                smp_call_function(NULL, NULL, 0, 0);
+            }" > conftest$$.c
+
+            $CC $CFLAGS -c conftest$$.c > /dev/null 2>&1
+            rm -f conftest$$.c
+
+            if [ -f conftest$$.o ]; then
+                rm -f conftest$$.o
+                echo "#define NV_SMP_CALL_FUNCTION_PRESENT" >> conftest.h
+                echo "#define NV_SMP_CALL_FUNCTION_ARGUMENT_COUNT 4 " >> conftest.h
+                return
+            fi
+
+            echo "$CONFTEST_PREAMBLE
+            #include <linux/smp.h>
+            void conftest_smp_call_function(void) {
+                smp_call_function(NULL, NULL, 0);
+            }" > conftest$$.c
+
+            $CC $CFLAGS -c conftest$$.c > /dev/null 2>&1
+            rm -f conftest$$.c
+
+            if [ -f conftest$$.o ]; then
+                rm -f conftest$$.o
+                echo "#define NV_SMP_CALL_FUNCTION_PRESENT" >> conftest.h
+                echo "#define NV_SMP_CALL_FUNCTION_ARGUMENT_COUNT 3 " >> conftest.h
+                return
+            else
+                echo "#error smp_call_function() conftest failed!" >> conftest.h
+            fi
+        ;;
+
+        on_each_cpu)
+            #
+            # Determine if the on_each_cpu() function is present
+            # and how many arguments it takes.
+            #
+            echo "$CONFTEST_PREAMBLE
+            #include <linux/smp.h>
+            void conftest_on_each_cpu(void) {
+            #ifdef CONFIG_SMP
+                on_each_cpu();
+            #endif
+            }" > conftest$$.c
+
+            $CC $CFLAGS -c conftest$$.c > /dev/null 2>&1
+            rm -f conftest$$.c
+
+            if [ -f conftest$$.o ]; then
+                rm -f conftest$$.o
+                echo "#undef NV_ON_EACH_CPU" >> conftest.h
+                return
+            fi
+
+            echo "$CONFTEST_PREAMBLE
+            #include <linux/smp.h>
+            void conftest_on_each_cpu(void) {
+                on_each_cpu(NULL, NULL, 0, 0);
+            }" > conftest$$.c
+
+            $CC $CFLAGS -c conftest$$.c > /dev/null 2>&1
+            rm -f conftest$$.c
+
+            if [ -f conftest$$.o ]; then
+                rm -f conftest$$.o
+                echo "#define NV_ON_EACH_CPU_PRESENT" >> conftest.h
+                echo "#define NV_ON_EACH_CPU_ARGUMENT_COUNT 4 " >> conftest.h
+                return
+            fi
+
+            echo "$CONFTEST_PREAMBLE
+            #include <linux/smp.h>
+            void conftest_on_each_cpu(void) {
+                on_each_cpu(NULL, NULL, 0);
+            }" > conftest$$.c
+
+            $CC $CFLAGS -c conftest$$.c > /dev/null 2>&1
+            rm -f conftest$$.c
+
+            if [ -f conftest$$.o ]; then
+                rm -f conftest$$.o
+                echo "#define NV_ON_EACH_CPU_PRESENT" >> conftest.h
+                echo "#define NV_ON_EACH_CPU_ARGUMENT_COUNT 3 " >> conftest.h
+                return
+            else
+                echo "#error on_each_cpu() conftest failed!" >> conftest.h
+            fi
+        ;;
+
     esac
 }
 
@@ -1278,11 +1392,21 @@
         # Run a series of compile tests to determine the set of interfaces
         # and features available in the target kernel.
         #
+        FILES="linux/semaphore.h"
         shift 5
 
         rm -f conftest.h
         for i in $*; do compile_test $i; done
 
+        for FILE in $FILES; do
+            FILE_DEFINE=NV_`echo $FILE | tr '/.' '_' | tr 'a-z' 'A-Z'`_PRESENT
+            if [ -f $HEADERS/$FILE -o -f $OUTPUT/include/$FILE ]; then
+                echo "#define $FILE_DEFINE" >> conftest.h
+            else
+                echo "#undef $FILE_DEFINE" >> conftest.h
+            fi
+        done
+
         if [ -n "$SHOW_COMPILE_TEST_RESULTS" -a -f conftest.h ]; then
             cat conftest.h
         fi
Only in usr/src/nv.2627763: modules.order
diff -ru usr/src/nv/nv-linux.h usr/src/nv.2627763/nv-linux.h
--- usr/src/nv/nv-linux.h	2008-06-10 17:17:33.000000000 -0700
+++ usr/src/nv.2627763/nv-linux.h	2008-08-08 08:52:54.182807961 -0700
@@ -104,7 +104,11 @@
 #endif
 
 #include <linux/spinlock.h>
+#if defined(NV_LINUX_SEMAPHORE_H_PRESENT)
+#include <linux/semaphore.h>
+#else
 #include <asm/semaphore.h>
+#endif
 #include <linux/completion.h>
 #include <linux/highmem.h>
 
@@ -656,6 +660,46 @@
 
 #endif /* !defined NVWATCH */
 
+#if defined(NV_SMP_CALL_FUNCTION_PRESENT)
+#if (NV_SMP_CALL_FUNCTION_ARGUMENT_COUNT == 4)
+#define NV_SMP_CALL_FUNCTION(func, info, wait)               \
+    ({                                                       \
+        int __ret = smp_call_function(func, info, 1, wait);  \
+        __ret;                                               \
+     })
+#elif (NV_SMP_CALL_FUNCTION_ARGUMENT_COUNT == 3)
+#define NV_SMP_CALL_FUNCTION(func, info, wait)               \
+    ({                                                       \
+        int __ret = smp_call_function(func, info, wait);     \
+        __ret;                                               \
+     })
+#else
+#error "NV_SMP_CALL_FUNCTION_ARGUMENT_COUNT value unrecognized!"
+#endif
+#elif defined(CONFIG_SMP)
+#error "NV_SMP_CALL_FUNCTION() undefined (smp_call_function() unavailable)!"
+#endif
+
+#if defined(NV_ON_EACH_CPU_PRESENT)
+#if (NV_ON_EACH_CPU_ARGUMENT_COUNT == 4)
+#define NV_ON_EACH_CPU(func, info, wait)               \
+    ({                                                 \
+        int __ret = on_each_cpu(func, info, 1, wait);  \
+        __ret;                                         \
+     })
+#elif (NV_ON_EACH_CPU_ARGUMENT_COUNT == 3)
+#define NV_ON_EACH_CPU(func, info, wait)               \
+    ({                                                 \
+        int __ret = on_each_cpu(func, info, wait);     \
+        __ret;                                         \
+     })
+#else
+#error "NV_ON_EACH_CPU_ARGUMENT_COUNT value unrecognized!"
+#endif
+#elif !defined(KERNEL_2_4) && defined(CONFIG_SMP)
+#error "NV_ON_EACH_CPU() undefined (on_each_cpu() unavailable)!"
+#endif
+
 static inline int nv_execute_on_all_cpus(void (*func)(void *info), void *info)
 {
     int ret = 0;
@@ -665,13 +709,13 @@
 #if defined(preempt_disable)
     preempt_disable();
 #endif
-    ret = smp_call_function(func, info, 1, 1);
+    ret = NV_SMP_CALL_FUNCTION(func, info, 1);
     func(info);
 #if defined(preempt_enable)
     preempt_enable();
 #endif
 #else
-    ret = on_each_cpu(func, info, 1, 1);
+    ret = NV_ON_EACH_CPU(func, info, 1);
 #endif
     return ret;
 }
@@ -684,12 +728,16 @@
 #define nv_down(lock)                   down(&lock)
 #define nv_up(lock)                     up(&lock)
 
+#if defined(CONFIG_PREEMPT_RT)
+#define NV_INIT_MUTEX(mutex) init_MUTEX(mutex)
+#else
 #define NV_INIT_MUTEX(mutex)                       \
     {                                              \
         struct semaphore __mutex =                 \
             __SEMAPHORE_INITIALIZER(*(mutex), 1);  \
         *(mutex) = __mutex;                        \
     }
+#endif
 
 #if defined (KERNEL_2_4)
 #  define NV_IS_SUSER()                 suser()
diff -ru usr/src/nv/nv-vm.c usr/src/nv.2627763/nv-vm.c
--- usr/src/nv/nv-vm.c	2008-06-10 17:17:32.000000000 -0700
+++ usr/src/nv.2627763/nv-vm.c	2008-08-08 08:52:54.182807961 -0700
@@ -284,39 +284,36 @@
 #endif  /* NV_SG_MAP_BUFFERS */
 
 
-/* cache flushing
- * when allocating new pages, we convert the kernel mapping from cached to
- * uncached to avoid cache aliasing. one problem with this is that cpus can 
- * still contain data cached from these pages, in addition to stale ptes that
- * are cached and think the pages are still cached. normally, the cpu's self
- * snoop (SS) capability would catch this between cpus, but if the pages are
- * mapped through the agp aperture, SS is not capable of detecting these
- * conflicts. we try to rely on the kernel's provided interfaces when possible,
- * but need additional flushing on earlier kernels.
- */
 /*
- * 2.4 kernels handle flushing in the change_page_attr() call, but kernels 
- * earlier than 2.4.27 don't flush on cpus that support Self Snoop, so we
- * manually flush on these kernels (actually, we go ahead and flush on all
- * 2.4 kernels, as it's possible some others may be missing this fix and
- * we'd prefer to be a little slower flushing caches than hanging the 
- * system.
- * 2.6 kernels split the flushing out to a seperate call, 
- * global_flush_tlb(), so we rely on that. however, there are some 2.6
- * x86_64 kernels that do not properly flush. Likewise, a number of kernels
- * starting with 2.6.20-rc1 do not flush correctly.
+ * Cache flushes and TLB invalidation
+ *
+ * Allocating new pages, we may change their kernel mappings' memory types
+ * from cached to UC to avoid cache aliasing. One problem with this is
+ * that cache lines may still contain data from these pages and there may
+ * be then stale TLB entries.
+ *
+ * The Linux kernel's strategy for addressing the above has varied since
+ * the introduction of change_page_attr(): it has been implicit in the
+ * change_page_attr() interface, explicit in the global_flush_tlb()
+ * interface and, as of this writing, is implicit again in the interfaces
+ * replacing change_page_attr(), i.e. set_pages_*().
+ *
+ * In theory, any of the above should satisfy the NVIDIA graphics driver's
+ * requirements. In practise, none do reliably:
+ *
+ *  - some Linux 2.4 kernels (e.g. vanilla 2.4.27) did not flush caches
+ *    on CPUs with Self Snoop capability, but this feature does not
+ *    interact well with AGP.
+ *
+ *  - most Linux 2.6 kernels' implementations of the global_flush_tlb()
+ *    interface fail to flush caches on all or some CPUs, for a
+ *    variety of reasons.
+ *
+ * Due to the above, the NVIDIA Linux graphics driver is forced to perform
+ * heavy-weight flush/invalidation operations to avoid problems due to
+ * stale cache lines and/or TLB entries.
  */
-#if !defined(KERNEL_2_4) && defined(NVCPU_X86_64) && \
-  (LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 14))
-#define NV_CPA_DF_LIST_BUG 1
-#endif
 
-#if (defined(KERNEL_2_4) || defined(NV_CPA_DF_LIST_BUG) || \
-  (LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 20))) && !defined(CONFIG_XEN)
-#define NV_CPA_NEEDS_FLUSHING 1
-#endif
-
-#if defined(NV_CPA_NEEDS_FLUSHING)
 static void cache_flush(void *p)
 {
     unsigned long reg0, reg1;
@@ -324,7 +321,7 @@
     CACHE_FLUSH();
 
     // flush global TLBs
-#if defined (NVCPU_X86)
+#if defined(NVCPU_X86)
     asm volatile("movl %%cr4, %0;  \n"
                  "andl $~0x80, %0; \n"
                  "movl %0, %%cr4;  \n"
@@ -334,7 +331,7 @@
                  "movl %0, %%cr4;  \n"
                  : "=&r" (reg0), "=&r" (reg1)
                  : : "memory");
-#else
+#elif defined(NVCPU_X86_64)
     asm volatile("movq %%cr4, %0;  \n"
                  "andq $~0x80, %0; \n"
                  "movq %0, %%cr4;  \n"
@@ -346,23 +343,19 @@
                  : : "memory");
 #endif
 }
-#endif /* NV_CPA_NEEDS_FLUSHING */
 
 static void nv_flush_caches(void)
 {
-#if defined(KERNEL_2_4)
-    // for 2.4 kernels, just automatically flush the caches and invalidate tlbs
-    nv_execute_on_all_cpus(cache_flush, NULL);
-#else
-    // for 2.6 (and later) kernels, rely on global_flush_tlb
-#if defined(NV_CPA_NEEDS_FLUSHING)
-    nv_execute_on_all_cpus(cache_flush, NULL);
+#if defined(CONFIG_XEN)
+    return;
 #endif
+    nv_execute_on_all_cpus(cache_flush, NULL);
+#if !defined(KERNEL_2_4)
 #if (defined(NVCPU_X86) || defined(NVCPU_X86_64)) && \
   defined(NV_CHANGE_PAGE_ATTR_PRESENT)
     global_flush_tlb();
 #endif
-    nv_ext_flush_caches(); // handle other platform flushes if present
+    nv_ext_flush_caches();
 #endif
 }
 
@@ -394,12 +387,6 @@
  * additionally, some platforms require us to allocate 64-bit addresses,
  * then remap them through an iommu/swiotlb to get 32-bit addresses. this
  * is handled here as well.
- *
- * the official kernel interface for allocating dma memory is to use
- * pci_alloc_consistent. this will abstract many of the 32-bit issues from us
- * mentioned above and will allow us to clean our code up quite a bit. we're
- * migrating towards this interface, but it's not quite stable in all cases
- * yet. em64t is one such current case.
  */
 
 int nv_vm_malloc_pages(
diff -ru usr/src/nv/nv.c usr/src/nv.2627763/nv.c
--- usr/src/nv/nv.c	2008-06-10 17:17:32.000000000 -0700
+++ usr/src/nv.2627763/nv.c	2008-08-08 08:52:54.182807961 -0700
@@ -941,7 +941,7 @@
 
 #if defined(CONFIG_HOTPLUG_CPU)
     int cpu = (NvUPtr)info;
-    if ((cpu != 0) && (cpu != smp_processor_id()))
+    if ((cpu != 0) && (cpu != (int)smp_processor_id()))
         return;
 #endif
 
@@ -967,7 +967,7 @@
 
 #if defined(CONFIG_HOTPLUG_CPU)
     int cpu = (NvUPtr)info;
-    if ((cpu != 0) && (cpu != smp_processor_id()))
+    if ((cpu != 0) && (cpu != (int)smp_processor_id()))
         return;
 #endif
 
@@ -1194,8 +1194,7 @@
     unsigned int cachetype
 )
 {
-#if defined(NV_CHANGE_PAGE_ATTR_PRESENT) || \
-    (defined(NV_SET_PAGES_UC_PRESENT) && !defined(NVCPU_X86))
+#if defined(NV_CHANGE_PAGE_ATTR_PRESENT)
     unsigned long retval = -1;
 #if defined(NVCPU_X86) || defined(NVCPU_X86_64)
     pgd_t *pgd = NULL;
@@ -1287,27 +1286,27 @@
 static int
 nv_kern_cpu_callback(struct notifier_block *nfb, unsigned long action, void *hcpu)
 {
-    int cpu = (NvUPtr)hcpu;
+    unsigned int cpu = get_cpu();
 
     switch (action)
     {
         case CPU_DOWN_FAILED:
         case CPU_ONLINE:
-            if (get_cpu() == cpu)
+            if (cpu == (NvUPtr)hcpu)
                 __nv_setup_pat_entries(NULL);
             else
-                smp_call_function(__nv_setup_pat_entries, hcpu, 1, 1);
-            put_cpu();
+                NV_SMP_CALL_FUNCTION(__nv_setup_pat_entries, hcpu, 1);
             break;
         case CPU_DOWN_PREPARE:
-            if (get_cpu() == cpu)
+            if (cpu == (NvUPtr)hcpu)
                 __nv_restore_pat_entries(NULL);
             else
-                smp_call_function(__nv_restore_pat_entries, hcpu, 1, 1);
-            put_cpu();
+                NV_SMP_CALL_FUNCTION(__nv_restore_pat_entries, hcpu, 1);
             break;
     }
 
+    put_cpu();
+
     return NOTIFY_OK;
 }
 
@@ -2856,13 +2855,7 @@
     nv_state_t *nv = (nv_state_t *) data;
     nv_linux_state_t *nvl = NV_GET_NVL_FROM_NV_STATE(nv);
 
-    /*
-     * XXX: This level of indirection is necessary to work around
-     * problems with Linux kernels using a non-standard calling
-     * convention, i.e. Arjan van de Ven's/RedHat's 2.6.0 kernels.
-     */
-    NV_CHECK_PCI_CONFIG_SPACE(nvl->isr_bh_sp, nv, TRUE, TRUE, FALSE);
-
+    NV_CHECK_PCI_CONFIG_SPACE(nvl->isr_bh_sp, nv, TRUE, FALSE, FALSE);
     rm_isr_bh(nvl->isr_bh_sp, nv);
 }
 
@@ -3520,7 +3513,7 @@
     BOOL kern
 )
 {
-#if defined(NV_SET_PAGES_UC_PRESENT) && defined(NVCPU_X86)
+#if defined(NV_SET_PAGES_UC_PRESENT)
     nv_printf(NV_DBG_ERRORS,
         "NVRM: can't translate address in nv_get_phys_address()!\n");
 #else
@@ -4454,6 +4447,7 @@
          case PCI_D3hot:
             nv_printf(NV_DBG_INFO, "NVRM: ACPI: received suspend event\n");
             
+            tasklet_disable(&lnv->tasklet);
             status = rm_power_management(sp, nv, 0, power_state);
 
             nv_ext_suspend_bus(lnv->dev);
@@ -4470,6 +4464,7 @@
             status = rm_power_management(sp, nv, 0, power_state);
 
             __nv_enable_pat_support();
+            tasklet_enable(&lnv->tasklet);
 
             break;
 
diff -ru usr/src/nv/os-interface.c usr/src/nv.2627763/os-interface.c
--- usr/src/nv/os-interface.c	2008-06-10 17:17:32.000000000 -0700
+++ usr/src/nv.2627763/os-interface.c	2008-08-08 08:58:11.776906615 -0700
@@ -48,7 +48,7 @@
 #endif
     local_bh_disable();
     atomic_set(&os_smp_barrier, 1);
-    ret = smp_call_function(ipi_handler, NULL, 1, 0);
+    ret = NV_SMP_CALL_FUNCTION(ipi_handler, NULL, 0);
 #endif
     return (ret == 0) ? RM_OK : RM_ERROR;
 }
@@ -87,7 +87,11 @@
 {
     nv_stack_t        *sp;
     struct completion  completion;
+#if defined(CONFIG_PREEMPT_RT)
+    raw_spinlock_t     lock;
+#else
     spinlock_t         lock;
+#endif
     S032               count;
 } os_sema_t;
 
@@ -700,7 +704,7 @@
     U032 sig
 )
 {
-    return kill_proc(pid, sig, 1) ? RM_ERR_OPERATING_SYSTEM : RM_OK;
+    return RM_ERR_NOT_SUPPORTED;
 }
 
 /*******************************************************************************/
@@ -881,6 +885,23 @@
 {
     struct pci_dev *dev;
     unsigned int devfn = PCI_DEVFN(slot, function);
+    nv_state_t *nv;
+
+    if (!NV_MAY_SLEEP())
+    {
+        nv_printf(NV_DBG_ERRORS,
+            "NVRM: os_pci_init_handle: invalid context!\n");
+    }
+
+    if ((function == 0) && (bus != 255 && slot != 255))
+    {
+        if ((nv = nv_get_adapter_state(bus, slot)) != NULL)
+            return nv->handle;
+    }
+
+    if (!NV_MAY_SLEEP())
+        return NULL;
+
     dev = NV_PCI_GET_SLOT(bus, devfn);
     if (dev) {
         if (vendor) *vendor = dev->vendor;
